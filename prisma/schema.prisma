// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
  ADMIN
  GUEST
}

enum RoomType {
  REGULAR
  PREMIUM
  DELUXE
  EXECUTIVE
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentMethod {
  CASH
  CARD
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  phone        String
  password     String
  name         String
  image        String?
  role         UserRole      @default(GUEST)
  deleted      Boolean       @default(false)
  reservations Reservation[]
  favorites    Favorite[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Room {
  id           Int           @id @default(autoincrement())
  number       String        @unique
  name         String
  image        String?
  type         RoomType
  status       RoomStatus    @default(AVAILABLE)
  price        Float
  reservations Reservation[]
  favorites    Favorite[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Reservation {
  id             Int               @id @default(autoincrement())
  user           User              @relation(fields: [userId], references: [id])
  userId         Int
  room           Room              @relation(fields: [roomId], references: [id])
  roomId         Int
  status         ReservationStatus @default(PENDING)
  checkInDate    DateTime
  checkOutDate   DateTime
  totalAmount    Float
  bill           Bill?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model Bill {
  id             Int           @id @default(autoincrement())
  reservation    Reservation   @relation(fields: [reservationId], references: [id])
  reservationId  Int           @unique
  amount         Float
  paid           Boolean       @default(false)
  paymentMethod  PaymentMethod
  issuedAt       DateTime      @default(now())
}

model Favorite {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  room      Room    @relation(fields: [roomId], references: [id])
  roomId    Int
  createdAt DateTime @default(now())

  @@unique([userId, roomId])
}
